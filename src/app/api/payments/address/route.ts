import { NextRequest, NextResponse } from 'next/server'
import { AuthService } from '@/lib/services/auth'
import { prisma } from '@/lib/database'
import { isNoDatabaseMode } from '@/lib/inMemoryStorage'

export const dynamic = 'force-dynamic'

/**
 * @swagger
 * /api/payments/address:
 *   post:
 *     summary: Generate unique payment address for user
 *     tags: [Payments]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *             schema:
 *               type: object
 *               required:
 *                 - plan
 *                 - amount
 *               properties:
 *                 plan:
 *                   type: string
 *                   enum: [basic, premium, enterprise]
 *                 amount:
 *                   type: number
 *                   description: Amount in THETA
 *     responses:
 *       200:
 *         description: Payment address generated successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 address:
 *                   type: string
 *                   description: Unique payment address
 *                 amount:
 *                   type: number
 *                 plan:
 *                   type: string
 *                 expiresAt:
 *                   type: string
 *                   format: date-time
 *       400:
 *         description: Bad request
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Internal server error
 */
export async function POST(request: NextRequest) {
  try {
    const authHeader = request.headers.get('authorization')
    const token = authHeader?.startsWith('Bearer ') ? authHeader.substring(7) : undefined
    const user = token
      ? await AuthService.validateToken(token)
      : await AuthService.getOrCreateDemoUser()
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { plan, amount } = body

    if (!plan || !amount) {
      return NextResponse.json(
        { error: 'Plan and amount are required' },
        { status: 400 }
      )
    }

    if (!['basic', 'premium', 'enterprise'].includes(plan)) {
      return NextResponse.json(
        { error: 'Invalid plan. Must be basic, premium, or enterprise' },
        { status: 400 }
      )
    }

    // Validate amount for enterprise plan
    if (plan === 'enterprise') {
      if (amount < 6000 || amount > 20000) {
        return NextResponse.json(
          { error: 'Enterprise plan amount must be between 6000 and 20000 THETA' },
          { status: 400 }
        )
      }
    }

    // Generate a unique payment address (in a real implementation, this would be generated by the blockchain)
    const paymentAddress = generateUniqueAddress(user.id, plan, amount)
    
    // Set expiration time (24 hours from now)
    const expiresAt = new Date()
    expiresAt.setHours(expiresAt.getHours() + 24)

    if (!isNoDatabaseMode()) {
      // Store payment address in database for tracking
      await prisma.paymentAddress.create({
        data: {
          userId: user.id,
          address: paymentAddress,
          plan,
          amount,
          expiresAt,
          status: 'pending'
        }
      })
    }

    return NextResponse.json({
      address: paymentAddress,
      amount,
      plan,
      expiresAt,
      network: 'theta-testnet',
      instructions: [
        'Copy the payment address',
        'Open your Theta wallet',
        'Switch to Theta Testnet network',
        `Send exactly ${amount} THETA to the address`,
        'Wait for transaction confirmation'
      ]
    })
  } catch (error) {
    console.error('Error generating payment address:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

/**
 * Generate a unique payment address for the user
 * In a real implementation, this would integrate with Theta blockchain
 */
function generateUniqueAddress(userId: string, plan: string, amount: number): string {
  // This is a mock implementation - in reality, you'd generate a real Theta address
  const timestamp = Date.now()
  const random = Math.random().toString(36).substring(2, 15)
  return `0x${userId.substring(0, 8)}${plan}${amount}${timestamp.toString(36)}${random}`
}
